import './avaliacao.css';
import { Link, useSearchParams } from 'react-router-dom';
import { useState, useLayoutEffect } from 'react';
import { useEstudantes } from '../context/EstudantesContext';
import { useAvaliacoes } from '../context/AvaliacoesContext';

export default function AvaliacaoExperiencia() {
  const [searchParams] = useSearchParams();
  const { obterEstudantePorId } = useEstudantes();
  const { adicionarAvaliacao, obterAvaliacaoPorEstudanteETipo } = useAvaliacoes();
  
  const estudanteId = searchParams.get('estudante');
  const tipoFromUrl = searchParams.get('tipo');
  const estudante = estudanteId ? obterEstudantePorId(parseInt(estudanteId)) : null;
  
  // Usar o tipo da URL ou padr√£o 1
  const [tipoAvaliacao, setTipoAvaliacao] = useState(tipoFromUrl || "1");
  
  // Verificar se j√° existe uma avalia√ß√£o para este estudante e tipo
  const avaliacaoExistente = estudanteId && tipoAvaliacao ? 
    obterAvaliacaoPorEstudanteETipo(parseInt(estudanteId), parseInt(tipoAvaliacao)) : null;

  useLayoutEffect(() => {
    window.scrollTo({ top: 0, behavior: 'instant' });
  }, []);

  const [formData, setFormData] = useState(avaliacaoExistente?.respostas || {});
  const [observacoes, setObservacoes] = useState(avaliacaoExistente?.observacoes || '');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState(null);
  const [isReadOnly, setIsReadOnly] = useState(!!avaliacaoExistente);

  const perguntas = [
    "Atende as regras?",
    "Socializa com o grupo?",
    "Isola-se do grupo?",
    "Possui toler√¢ncia a frustra√ß√£o?",
    "Respeita colega e professores?",
    "Faz relatos fantasiosos?",
    "Concentra-se nas atividades?",
    "Tem iniciativa?",
    "Sonol√™ncia durante as atividades em sala de aula?",
    "Altera√ß√µes intensas de humor?",
    "Indica oscila√ß√£o repentina de humor?",
    "Irrita-se com facilidade?",
    "Ansiedade?",
    "Escuta quando seus colegas falam?",
    "Escuta e segue orienta√ß√£o dos professores?",
    "Mant√©m-se em sala de aula?",
    "Desloca-se muito na sala?",
    "Fala demasiadamente?",
    "√â pontual?",
    "√â ass√≠duo?",
    "Demonstra desejo de trabalhar?",
    "Apropria-se indevidamente daquilo que n√£o √© seu?",
    "Indica h√°bito de banho di√°rio?",
    "Indica h√°bito de escova√ß√£o e qualidade na escova√ß√£o?",
    "Indica cuidado com a apar√™ncia e limpeza do uniforme?",
    "Indica autonomia quanto a estes h√°bitos?",
    "Indica falta do uso de medica√ß√£o com oscila√ß√µes de comportamento?",
    "Tem meio articulado de conseguir receitas e aquisi√ß√µes das medica√ß√µes?",
    "Traz seus materiais organizados?",
    "Usa transporte coletivo?",
    "Tem iniciativa diante das atividades propostas?",
    "Localiza-se no espa√ßo da Institui√ß√£o?",
    "Situa-se nas trocas de sala e atividades?",
    "Interage par a par?",
    "Interage em grupo?",
    "Cria conflitos e intrigas?",
    "Promove a harmonia?",
    "Faz intrigas entre colegas x professores?",
    "Demonstra interesse em participar das atividades extraclasses?",
    "Existe intera√ß√£o/participa√ß√£o da fam√≠lia em apoio ao usu√°rio na Institui√ß√£o?",
    "Existe superprote√ß√£o por parte da fam√≠lia quanto a autonomia do usu√°rio?",
    "Usu√°rio traz relatos negativos da fam√≠lia (de forma geral)?",
    "Usu√°rio traz relatos positivos da fam√≠lia (de forma geral)?",
    "Existe incentivo quanto a busca de autonomia para o usu√°rio por parte da fam√≠lia?",
    "Existe incentivo quanto a inser√ß√£o do usu√°rio no mercado de trabalho por parte da fam√≠lia?",
    "Traz os documentos enviados pela Institui√ß√£o assinado?",
  ];

  const handleInputChange = (perguntaIndex, value) => {
    setFormData(prev => ({
      ...prev,
      [`pergunta_${perguntaIndex}`]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmitStatus(null);

    try {
      // Simula√ß√£o de valida√ß√£o e processamento
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Adicionar avalia√ß√£o ao contexto
      adicionarAvaliacao({
        estudanteId: parseInt(estudanteId),
        tipoAvaliacao: parseInt(tipoAvaliacao),
        dataAvaliacao: new Date().toISOString().split('T')[0],
        respostas: formData,
        observacoes: observacoes
      });
      
      setSubmitStatus('success');
      
      // Redirecionar para a lista de avalia√ß√µes ap√≥s 2 segundos
      setTimeout(() => {
        window.location.href = '/avaliacoes';
      }, 2000);
      
    } catch (error) {
      setSubmitStatus('error');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="avaliacao-body">
      <Link to="/avaliacoes" className="avaliacao-back">‚Üê Voltar √†s Avalia√ß√µes</Link>

      <div className="avaliacao-container">
        <h2 className="avaliacao-title">
          {isReadOnly ? 'Visualizar' : 'Avalia√ß√£o'} {tipoAvaliacao}¬™ Experi√™ncia
          {estudante && ` - ${estudante.nome}`}
        </h2>
        
        {isReadOnly && (
          <div className="avaliacao-info">
            <p><strong>Data da Avalia√ß√£o:</strong> {avaliacaoExistente?.dataAvaliacao}</p>
            <p><strong>Status:</strong> Conclu√≠da</p>
          </div>
        )}

        <form className="avaliacao-form" onSubmit={handleSubmit}>
          <label className="avaliacao-label">
            Tipo de Avalia√ß√£o:
            <select
              className="avaliacao-input"
              value={tipoAvaliacao}
              onChange={(e) => setTipoAvaliacao(e.target.value)}
              disabled={tipoFromUrl || isReadOnly} // Desabilitar se veio da URL ou se √© visualiza√ß√£o
            >
              <option value="1">Avalia√ß√£o 1</option>
              <option value="2">Avalia√ß√£o 2</option>
            </select>
          </label>

          {perguntas.map((pergunta, index) => (
            <div key={index} className="avaliacao-label">
              {index + 1} - {pergunta}
              <select 
                className="avaliacao-input" 
                name={`pergunta_${index}`}
                value={formData[`pergunta_${index}`] || ''}
                onChange={(e) => handleInputChange(index, e.target.value)}
                required={!isReadOnly}
                disabled={isReadOnly}
              >
                <option value="">Selecione</option>
                <option value="sim">Sim</option>
                <option value="maioria">Maioria das vezes</option>
                <option value="rara">Raramente</option>
                <option value="nao">N√£o</option>
              </select>
            </div>
          ))}

          <label className="avaliacao-label">
            Observa√ß√µes:
            <textarea 
              className="avaliacao-input" 
              rows="4" 
              value={observacoes}
              onChange={(e) => setObservacoes(e.target.value)}
              disabled={isReadOnly}
            />
          </label>

          {submitStatus && (
            <div className={`submit-status ${submitStatus}`}>
              {submitStatus === 'success' ? (
                <>
                  Avalia√ß√£o salva com sucesso! üéâ
                </>
              ) : (
                <>
                  Erro ao salvar avalia√ß√£o. Tente novamente.
                </>
              )}
            </div>
          )}

          {!isReadOnly && (
            <button 
              type="submit" 
              className={`avaliacao-button ${isSubmitting ? 'loading' : ''}`}
              disabled={isSubmitting}
            >
              {isSubmitting ? 'Salvando...' : 'Salvar Avalia√ß√£o'}
            </button>
          )}
          
          {isReadOnly && (
            <div className="avaliacao-actions">
              <Link to="/avaliacoes" className="avaliacao-button">
                Voltar √†s Avalia√ß√µes
              </Link>
            </div>
          )}
        </form>
      </div>
    </div>
  );
}
